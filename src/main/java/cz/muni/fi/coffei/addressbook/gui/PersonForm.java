/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.coffei.addressbook.gui;

import java.awt.Component;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutionException;

import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;
import javax.swing.table.AbstractTableModel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;

import cz.muni.fi.pv168.Contact;
import cz.muni.fi.pv168.ContactManager;
import cz.muni.fi.pv168.DBUtils;
import cz.muni.fi.pv168.Group;
import cz.muni.fi.pv168.GroupManager;
import cz.muni.fi.pv168.Person;
import cz.muni.fi.pv168.PersonManager;
import cz.muni.fi.pv168.ServiceFailureException;

/**
 *
 * @author zitoo
 */
public class PersonForm extends javax.swing.JDialog {

    private static final Logger log = LoggerFactory.getLogger(GroupForm.class);
    private static final ResourceBundle bundle = ResourceBundle.getBundle("cz/muni/fi/coffei/addressbook/gui/Windows"); // NOI18N
    private ApplicationContext appCtx = null;
    private Person person = null;
    private List<Contact> assignedContacts = Collections.emptyList();
    
    //bool to sync loaders
    private boolean isFinished = false;

    /**
     * Creates new form PersonForm
     */
    public PersonForm(Window parent, Person person) {
        super(parent);
        this.person = person;

        initComponents();

        new LoadingWorker().execute();
        new GroupsLoadingWorker().execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basicsPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        bornLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        contactsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contactsTable = new javax.swing.JTable();
        groupsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        groupList = new JList<BoolWrapper<Group>>();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addContactButton = new javax.swing.JButton();
        deleteContactButton = new javax.swing.JButton();
        contentPanel = new JPanel();
        
        
        setContentPane(contentPanel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("PersonForm.title")); // NOI18N

        basicsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("PersonForm.basic"), javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP)); // NOI18N

        nameLabel.setText(bundle.getString("PersonForm.nameLabel")); // NOI18N

        if(person != null){
            nameText.setText(person.getName());
        } else {
            nameText.setText("");
        }

        bornLabel.setText(bundle.getString("PersonForm.bornLabel")); // NOI18N

        jComboBox1.setModel(bornDays());
        if(person != null){
            jComboBox1.setSelectedItem(person.getBorn().get(Calendar.DAY_OF_MONTH));
        }

        jComboBox2.setModel(bornMonths());
        if(person != null){
            jComboBox2.setSelectedItem(person.getBorn().get(Calendar.MONTH));
        }

        jComboBox3.setModel(bornYears());
        if(person != null){
            jComboBox3.setSelectedItem(person.getBorn().get(Calendar.YEAR));

        }

        javax.swing.GroupLayout basicsPanelLayout = new javax.swing.GroupLayout(basicsPanel);
        basicsPanel.setLayout(basicsPanelLayout);
        basicsPanelLayout.setHorizontalGroup(
            basicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(basicsPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameText))
                    .addGroup(basicsPanelLayout.createSequentialGroup()
                        .addComponent(bornLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, 0, 240, Short.MAX_VALUE)))
                .addContainerGap())
        );
        basicsPanelLayout.setVerticalGroup(
            basicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicsPanelLayout.createSequentialGroup()
                .addGroup(basicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bornLabel)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        contactsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("PersonForm.contacts"), javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP)); // NOI18N

        contactsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contactsTable.setTableHeader(null);
        jScrollPane2.setViewportView(contactsTable);

        javax.swing.GroupLayout contactsPanelLayout = new javax.swing.GroupLayout(contactsPanel);
        contactsPanel.setLayout(contactsPanelLayout);
        contactsPanelLayout.setHorizontalGroup(
            contactsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        contactsPanelLayout.setVerticalGroup(
            contactsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        groupsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("PersonForm.inGroup"), javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.TOP)); // NOI18N

        groupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(groupList);

        javax.swing.GroupLayout groupsPanelLayout = new javax.swing.GroupLayout(groupsPanel);
        groupsPanel.setLayout(groupsPanelLayout);
        groupsPanelLayout.setHorizontalGroup(
            groupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        groupsPanelLayout.setVerticalGroup(
            groupsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, groupsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        submitButton.setText(bundle.getString("PersonForm.submit")); // NOI18N
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(bundle.getString("PersonForm.cancel")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addContactButton.setText(bundle.getString("PersonForm.addContactButton")); // NOI18N
        addContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactButtonActionPerformed(evt);
            }
        });

        deleteContactButton.setText(bundle.getString("PersonForm.deleteContactButton")); // NOI18N
        deleteContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteContactButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(contentPanel);
      contentPanel.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(groupsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contactsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(basicsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(submitButton)
                        .addGap(58, 58, 58)
                        .addComponent(addContactButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteContactButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(basicsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contactsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(groupsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(cancelButton)
                    .addComponent(addContactButton)
                    .addComponent(deleteContactButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        
        loadPanel = new JPanel();
		loadPanel.setLayout(new BoxLayout(loadPanel, BoxLayout.Y_AXIS));
		{
			loadText = new JLabel(bundle.getString("PersonForm.mainLoadText"));
			loadText.setBorder(new EmptyBorder(60, 0, 10, 0));
			loadText.setAlignmentX(Component.CENTER_ALIGNMENT);
			loadPanel.add(loadText);
		}
		{
			JProgressBar loadProgress = new JProgressBar();
			loadProgress.setIndeterminate(true);
			loadPanel.add(loadProgress);
		}

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
        this.dispose();
        
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        new SavingWorker().execute();
    }//GEN-LAST:event_submitButtonActionPerformed

    private void addContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactButtonActionPerformed
        ContactsTableModel model = (ContactsTableModel) contactsTable.getModel();
        model.addContact(new Contact());
    }//GEN-LAST:event_addContactButtonActionPerformed

    private void deleteContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteContactButtonActionPerformed
        ContactsTableModel model = (ContactsTableModel) contactsTable.getModel();
        model.deleteContact(contactsTable.getSelectedRow());
    }//GEN-LAST:event_deleteContactButtonActionPerformed

    private void groupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupListMouseClicked
    	BoolWrapper<Group> wrapper = (BoolWrapper<Group>) groupList.getSelectedValue();
    	if(wrapper!=null) {
    		wrapper.value ^= true;
    		groupList.repaint();
    	}
    }//GEN-LAST:event_groupListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                PersonForm dialog = new PersonForm(new javax.swing.JFrame(), null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContactButton;
    private javax.swing.JPanel basicsPanel;
    private javax.swing.JLabel bornLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel contactsPanel;
    private javax.swing.JTable contactsTable;
    private javax.swing.JButton deleteContactButton;
    private javax.swing.JList<BoolWrapper<Group>> groupList;
    private javax.swing.JPanel groupsPanel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton submitButton;
    private JPanel contentPanel;
    //load stuff
    private JPanel loadPanel;
	private JLabel loadText;
    // End of variables declaration//GEN-END:variables

    private class ContactsTableModel extends AbstractTableModel {

        private ApplicationContext appCtx = DBUtils.getAppContext();
        private ContactManager contactManager = null;
        //private PersonManager personManager = null;
        private List<Contact> list = null;
       // private Person person = null;

        public ContactsTableModel(Person person) throws ServiceFailureException {
            contactManager = appCtx.getBean("contactManager", ContactManager.class);
            //personManager = appCtx.getBean("personManager", PersonManager.class);

            if (person == null) {
                list = new ArrayList<>();
                Contact email = new Contact();
                email.setType("email");
                list.add(email);

                Contact mobile = new Contact();
                mobile.setType("mobile");
                list.add(mobile);

                Contact address = new Contact();
                address.setType("address");
                list.add(address);

                Contact nick = new Contact();
                nick.setType("nick");
                list.add(nick);

            } else {
                list = contactManager.findContactsByPerson(person);
            }
        }

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Contact contact = list.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return contact.getType();
                case 1:
                    return contact.getValue();
                default:
                    throw new IllegalArgumentException("ColumnIndex");
            }
        }

        public void addContact(Contact contact) {
            list.add(contact);
            int lastRow = list.size() - 1;
            fireTableRowsInserted(lastRow, lastRow);
        }
        
        public void deleteContact(int rowIndex){
            list.remove(rowIndex);
            int lastRow = list.size() - 1;
            fireTableRowsDeleted(lastRow, lastRow);
        }

        public Contact getContactFromRow(int row) {
            return list.get(row);
        }

        public int getSize() {
            return list.size();
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                case 1:
                    return String.class;

                default:
                    throw new IllegalArgumentException("columnIndex");
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            Contact contact = list.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    contact.setType((String) aValue);
                    break;
                case 1:
                    contact.setValue((String) aValue);
                    break;
                default:
                    throw new IllegalArgumentException("columnIndex");
            }
            fireTableCellUpdated(rowIndex, columnIndex);
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0: 
                case 1:
                    return true;
                default:
                    throw new IllegalArgumentException("columnIndex");
            }
            
        }
    }

    private DefaultComboBoxModel<Integer> bornDays() {
        Integer[] bornDays = new Integer[31];
        for (int i = 0; i < 31; i++) {
            bornDays[i] = i + 1;
        }

        return new DefaultComboBoxModel(bornDays);
    }

    private DefaultComboBoxModel<Integer> bornMonths() {
        Integer bornMonths[] = new Integer[12];
        for (int i = 0; i < 12; i++) {
            bornMonths[i] = i + 1;
        }
        return new DefaultComboBoxModel<Integer>(bornMonths);
    }

    private DefaultComboBoxModel<Integer> bornYears() {
        Calendar cal = Calendar.getInstance();
        Integer bornYears[] = new Integer[cal.get(Calendar.YEAR) - 1920];
        for (int i = 0; i < (cal.get(Calendar.YEAR) - 1920); i++) {
            bornYears[i] = 1920 + i + 1;
        }

        return new DefaultComboBoxModel(bornYears);
    }
    private ListCellRenderer<BoolWrapper<Group>> listCellRenderer = new ListCellRenderer<BoolWrapper<Group>>() {

        @Override
        public Component getListCellRendererComponent(JList<? extends BoolWrapper<Group>> list, BoolWrapper<Group> value, int index, boolean isSelected, boolean cellHasFocus) {
            JCheckBox check = new JCheckBox();
            if (value != null) {
                check.setText(value.getObject().getName());
                check.setSelected(value.getValue());
            }

            return check;
        }
    };

    private class GroupsLoadingWorker extends SwingWorker<ListModel<BoolWrapper<Group>>, Void> {

    	public GroupsLoadingWorker() { 
    		PersonForm.this.setContentPane(loadPanel);
    		loadText.setText(bundle.getString("PersonForm.mainLoadText"));
    	}
    	
        @Override
        protected ListModel<BoolWrapper<Group>> doInBackground() throws Exception {
            if (appCtx == null) {
                appCtx = DBUtils.getAppContext();
            }

            GroupManager groupman = appCtx.getBean("groupManager", GroupManager.class);
            PersonManager personman = DBUtils.getAppContext().getBean("personManager", PersonManager.class);
            DefaultListModel<BoolWrapper<Group>> model = new DefaultListModel<>();

            if (person != null) {
                List<Group> assignedGroups = groupman.findGroupsByPerson(person);

                for (Group group : assignedGroups) {
                    model.addElement(new BoolWrapper<Group>(group, true));
                }
                List<Group> allGroups = groupman.findAllGroups();
                allGroups.removeAll(assignedGroups);

                for (Group group : allGroups) {
                    model.addElement(new BoolWrapper<Group>(group));
                }

                List groups = groupman.findAllGroups();


            } else {
                List<Group> groups = groupman.findAllGroups();
                for (Group group : groups) {
                    model.addElement(new BoolWrapper<Group>(group));
                }
            }

            return model;
        }

        protected void done() {
            try {
                ListModel<BoolWrapper<Group>> model = get();
                groupList.setModel(model);
                groupList.setCellRenderer(listCellRenderer);
            } catch (InterruptedException ex) {
                log.error("interrupted", ex.getCause());
                ExceptionDialogs.notifyOfException((Exception) ex.getCause(), true, PersonForm.this);
            } catch (ExecutionException ex) {
                log.error("datastore error", ex.getCause());
                ExceptionDialogs.notifyOfException((Exception) ex.getCause(), true, PersonForm.this);
            }
            
            if(isFinished) {
          	  PersonForm.this.setContentPane(contentPanel);
            } else {
          	  isFinished = true;
            }
        }
    }
    
    private class LoadingWorker extends SwingWorker<ContactsTableModel, Void> {

    	public LoadingWorker() { 
    		PersonForm.this.setContentPane(loadPanel);
    		loadText.setText(bundle.getString("PersonForm.mainLoadText"));
    	}
    	
        @Override
        protected void done() {

            ContactsTableModel model;
            try {
                model = get();
                contactsTable.setModel(model);

            } catch (InterruptedException ex) {
                log.error("Datasource error", ex);
                ExceptionDialogs.notifyOfException((Exception) ex.getCause(), true, PersonForm.this);
            } catch (ExecutionException ex) {
                log.error("Interupt error", ex);
                ExceptionDialogs.notifyOfException((Exception) ex.getCause(), true, PersonForm.this);
            }
            
            // no need for synchronization, because all done()s always run in one thread
          if(isFinished) {
        	  PersonForm.this.setContentPane(contentPanel);
          } else {
        	  isFinished = true;
          }
            
        }

        @Override
        protected ContactsTableModel doInBackground() throws Exception {
            return new ContactsTableModel(person);
        }
    }

    private class SavingWorker extends SwingWorker<Void, Void> {
        
    	public SavingWorker() {
    		PersonForm.this.setContentPane(loadPanel);
    		loadText.setText(bundle.getString("PersonForm.saveText"));
    	}
    	
    	
        protected void done(){
            try {
                get();
            } catch (InterruptedException ex) {
                log.error("Interupt error", ex);
                ExceptionDialogs.notifyOfException((Exception) ex.getCause(), true, PersonForm.this);
            } catch (ExecutionException ex) {
                log.error("Datasource error", ex);
                ExceptionDialogs.notifyOfException((Exception) ex.getCause(), true, PersonForm.this);
            }
            
            PersonForm.this.setVisible(false);
            PersonForm.this.dispose();
        }

        @Override
        protected Void doInBackground() throws Exception {
            if (appCtx == null) {
                appCtx = DBUtils.getAppContext();
            }
            PersonManager pman = appCtx.getBean("personManager", PersonManager.class);
            ContactManager cman = appCtx.getBean("contactManager", ContactManager.class);
            GroupManager gman = appCtx.getBean("groupManager", GroupManager.class);

            if (person == null) {
                Person person = new Person();
                person.setName(nameText.getText());

                Calendar cal = Calendar.getInstance();
                cal.set((Integer) jComboBox3.getSelectedItem(), (Integer) jComboBox2.getSelectedItem() - 1, (Integer) jComboBox1.getSelectedItem());
                person.setBorn(cal);

                pman.createPerson(person);

                ContactsTableModel model = (ContactsTableModel) contactsTable.getModel();
                for (int i = 0; i < model.getSize(); i++) {
                    Contact contact = model.getContactFromRow(i);
                    cman.createContact(contact, person);
                }
                
                ListModel lmodel = groupList.getModel();
                for(int i = 0; i< lmodel.getSize(); i++){
                    BoolWrapper<Group> wrapper = (BoolWrapper<Group>) lmodel.getElementAt(i);
                    if(wrapper.value == true){
                        gman.addPersonToGroup(person, wrapper.object);
                    }
                }


            } else {
                person.setName(nameText.getText());
                Calendar cal = Calendar.getInstance();
                cal.set((Integer) jComboBox3.getSelectedItem(), (Integer) jComboBox2.getSelectedItem(), (Integer) jComboBox1.getSelectedItem());
                person.setBorn(cal);

                pman.updatePerson(person);

                ContactsTableModel model = (ContactsTableModel) contactsTable.getModel();
                for (int i = 0; i < model.getSize(); i++) {
                    Contact contact = model.getContactFromRow(i);
                    if (contact.getId() == null) {
                        cman.createContact(contact, person);
                    } else {
                        cman.updateContact(contact);
                    }
                }
                
                ListModel lmodel = groupList.getModel();
                List<Group> assignedGroups = gman.findGroupsByPerson(person);
                for(int i = 0; i < lmodel.getSize(); i++){
                    BoolWrapper<Group> wrapper = (BoolWrapper<Group>) lmodel.getElementAt(i);
                    if(wrapper.value && !assignedGroups.contains(wrapper.object)){
                        gman.addPersonToGroup(person, wrapper.object);
                    } else if(!wrapper.value && assignedGroups.contains(wrapper.object)){
                        gman.removePersonFromGroup(person, wrapper.object);
                    }
                }
            }
            
            

            return null;
        }
    }

    private class BoolWrapper<E> {

        private E object;
        private boolean value;

        /**
         * Constructor
         *
         * @param object object to be bonded, can not be null
         * @param value value to bond
         */
        public BoolWrapper(E object, boolean value) {
            if (object == null) {
                throw new NullPointerException("object");
            }
            this.object = object;
            this.value = value;
        }

        /**
         * Constructor
         *
         * @param object object to be bonded with false
         */
        public BoolWrapper(E object) {
            this(object, false);
        }

        public E getObject() {
            return object;
        }

        public boolean getValue() {
            return value;
        }

        public void setValue(boolean value) {
            this.value = value;
        }

        @Override
        public int hashCode() {
            return object.hashCode() * 31;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            BoolWrapper<?> other = (BoolWrapper<?>) obj;
            if (object == null) {
                if (other.object != null) {
                    return false;
                }
            } else if (!object.equals(other.object)) {
                return false;
            }
            return true;
        }
    }
}
